// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file.proto

#include "file.pb.h"
#include "file.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace file {
namespace api {

static const char* FileExecutor_method_names[] = {
  "/file.api.FileExecutor/Execute",
  "/file.api.FileExecutor/GetFiles",
};

std::unique_ptr< FileExecutor::Stub> FileExecutor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileExecutor::Stub> stub(new FileExecutor::Stub(channel));
  return stub;
}

FileExecutor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Execute_(FileExecutor_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFiles_(FileExecutor_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileExecutor::Stub::Execute(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::file::api::RetVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void FileExecutor::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::file::api::FilePath* request, ::file::api::RetVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void FileExecutor::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::file::api::RetVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void FileExecutor::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::file::api::FilePath* request, ::file::api::RetVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

void FileExecutor::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::file::api::RetVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file::api::RetVal>* FileExecutor::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::file::api::RetVal>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::file::api::RetVal>* FileExecutor::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::file::api::RetVal>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, false);
}

::grpc::Status FileExecutor::Stub::GetFiles(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::file::api::FileList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFiles_, context, request, response);
}

void FileExecutor::Stub::experimental_async::GetFiles(::grpc::ClientContext* context, const ::file::api::FilePath* request, ::file::api::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFiles_, context, request, response, std::move(f));
}

void FileExecutor::Stub::experimental_async::GetFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::file::api::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFiles_, context, request, response, std::move(f));
}

void FileExecutor::Stub::experimental_async::GetFiles(::grpc::ClientContext* context, const ::file::api::FilePath* request, ::file::api::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFiles_, context, request, response, reactor);
}

void FileExecutor::Stub::experimental_async::GetFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::file::api::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file::api::FileList>* FileExecutor::Stub::AsyncGetFilesRaw(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::file::api::FileList>::Create(channel_.get(), cq, rpcmethod_GetFiles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::file::api::FileList>* FileExecutor::Stub::PrepareAsyncGetFilesRaw(::grpc::ClientContext* context, const ::file::api::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::file::api::FileList>::Create(channel_.get(), cq, rpcmethod_GetFiles_, context, request, false);
}

FileExecutor::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileExecutor_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileExecutor::Service, ::file::api::FilePath, ::file::api::RetVal>(
          [](FileExecutor::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::file::api::FilePath* req,
             ::file::api::RetVal* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileExecutor_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileExecutor::Service, ::file::api::FilePath, ::file::api::FileList>(
          [](FileExecutor::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::file::api::FilePath* req,
             ::file::api::FileList* resp) {
               return service->GetFiles(ctx, req, resp);
             }, this)));
}

FileExecutor::Service::~Service() {
}

::grpc::Status FileExecutor::Service::Execute(::grpc::ServerContext* context, const ::file::api::FilePath* request, ::file::api::RetVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileExecutor::Service::GetFiles(::grpc::ServerContext* context, const ::file::api::FilePath* request, ::file::api::FileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace file
}  // namespace api

